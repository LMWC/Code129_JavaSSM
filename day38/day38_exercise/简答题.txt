####问题一
请简述MybatisPlus与Mybatis之间的关系是什么?
答:
MybatisPlus是一个Mybatis的增强工具，在Mybatis的基础上只做增强不做改变，为简化开发与提高效率。

#### 问题二
逻辑删除与物理删除的区别是什么?
答:
1.物理删除执行的是delete语句，会将数据从数据库表中直接删除掉。
2.逻辑删除执行的是update语句，会在数据库表中添加一列字段，该字段用来标识数据是否被删除，
  所以逻辑删除只需要修改该列的值即可完成逻辑删除，如果使用逻辑删除需注意在查询的时候需要把已被删除的数据排除掉

#### 问题三
MybatisPlus标识实体类对应的表、实体类主键字段与其他字段对应的注解分别是什么?
答:
1. 标识实体类与对应表之间的关系使用@TableName
2. 标识实体类主键使用@TableId
3. 标识实体类其他非主键字段使用@TableField

#### 问题四
请简述MybatisPlus常见的主键生成策略有哪些并说说该如何修改其策略?
答:
1.AUTO采用数据库ID主键自增策略
2.INPUT手动设置主键值
3.ASSIGN_ID使用雪花算法生成主键ID
4.ASSIGN_UUID使用UUID作为主键ID
5.NONE无状态，该类型为未设置主键类型
  设置主键策略有两种方式
  方式一:使用注解设置
  	@TableId(type = IdType.AUTO)
  方式二:使用配置文件的方式，在application.yml添加如下配置
  	mybatis-plus:
        global-config:
          db-config:
            id-type: auto       #主键策略,auto自动增长

#### 问题五
简述MybatisPlus如何构建条件查询?
答:
MybatisPlus支持两种查询方式，分别是QueryWrapper和LambdaQueryWrapper。
QueryWrapper的构建方式如下:
	1.构建查询对象，QueryWrapper<实体类> qw = new QueryWrapper<>();
	2.构建查询条件，如qw.eq(boolean condition, R column, Object val)
	condition若为true则添加条件查询若为false则不添加该条件
	column为查询的字段的名称
	val为查询的值，最终构建的条件为 where column = val
LambdaQueryWrapper的构建方式如下:
	1.构建查询对象，LambdaQueryWrapper<实体类> lqw = new LambdaQueryWrapper<>();
	2.构建查询条件，如lqw.eq(boolean condition, R column, Object val)
	condition若为true则添加条件查询若为false则不添加该条件
	column为查询的字段，编写方式为 实体类::getXxx
	val:为查询值，最终构建的条件为 where column = val
其中eq是等值查询，如果想构建其他条件查询，则可参考官网来构建，官网地址为:
	https://baomidou.com/pages/10c804/

#### 问题六
聊一聊MybatisPlus内部是如何简化Mybatis对表进行增删改查?
答:
1.MybatisPlus的主旨是通过操作实体对象来操作数据库表，从而减少基础增删改查方法及对应SQL语句的编写；
2.MybatisPlus使用@TableName、@TableField、@TableId建立了实体类与表、实体类属性与表的列以及标识主键字段；
3.编写Mapper接口继承BaseMapper<实体类>，当调用其方法，比如 int insert(T entity); T即为传入的实体类，
  MybatisPlus会将insert方法翻译成 insert into ,根据实体类与表之间的关系获取到对应的表名，根据实体类的属性与表中列的关系获取表的列名，
  从传入的实体类对象中获取需要添加的数据，最终可以组装成对应的sql语句，即 insert into tableName (column1,column2,...)
  values(?,?,...),然后执行SQL语句完成数据库表的新增功能，而且这些操作都是框架内部自动完成；
4.综上所述，对于表基本的增删改查就可以直接通过调用BaseMapper接口中提供的方法进行完成，省略了编写方法与对应的SQL语句，达到简化开发提供效率。