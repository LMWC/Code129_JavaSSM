## 1.1 简答题一
请简述你对Spring AOP的理解?
答:
1.AOP: Aspect Oriented Programming面向切面编程，是一种编程范式，是对OOP的延续
2.AOP主要的作用是在不改变原有代码的前提下，对功能进行增强。
3.AOP的底层使用的是动态代理来实现的
4.使用AOP一般可用在权限认真、日志和事务处理等

## 1.2 简答题二
请简述你对AOP中相关核心概念的理解?
答：
Spring的AOP是在不改变原有代码的前提下，对功能进行增强。
目标类: 需要增强的类即为目标类
连接点: 一个连接点代表的是一个方法的执行，目标类中的所有方法可以简单理解为连接点
切入点: 目标类中需要增强的方法是切入点
通知: 需要增强的内容写在一个方法中，该方法称之为通知
通知类: 通知所在的类，称之为通知类
切面: 描述通知与切入点之间的关系，这个关系称之为切面
织入: 程序在运行的过程中，将通知动态的添加到切入点的过程，叫织入，Spring是在运行期进行织入
代理Proxy:需要对目标类中的方法进行增强，如果直接用目标类创建对象来调用方法，是无法实现的，所有需要为目标类创建代理对象来进行功能的增强。

## 1.3 简答题三
请简述Spring中有哪些通知类型?
答:
Spring切面可以应用5种类型的通知:
1.前置通知（Before）：在目标方法被调用之前调用通知功能；
2.后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法是否正确执行；
3.返回通知（After-returning ）：需在目标方法成功执行之后调用通知；
4.异常通知（After-throwing）：在目标方法抛出异常后调用通知；
5.环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。

## 1.4 简答题四
请简述Spring AOP中常见的注解有哪些?
答:
1.@EnableAspectJAutoProxy：开启注解格式AOP功能
2.@Aspect:写在类上，标识该类为AOP的切面类
3.@Pointcut：在切面类中声明的一个私有方法上，用来定义切入点表达式
4.通知类型相关的注解，@Before,@After,@AfterReturning,@AfterThrowing,@Around

## 1.5 简答题五
请简述Spring中事务的传播行为有哪些?
答:
事务的传播行为解决的问题是:方法A调用方法B,两个方法如果均配置了事务，用来指定方法B的事务与方法A事务之间的关系。
1.PROPAGATION_REQUIRED: 如果方法A有事务，方法B就加入该事务，如果方法A无事务，方法B创建一个新事务
2.PROPAGATION_REQUIRES_NEW:不管方法A有没有事务，方法B都会新创建一个事务
3.PROPAGATION_SUPPORTS:如果方法A有事务，方法B就加入，如果方法A无事务，方法B也没有事务
4.PROPAGATION_NOT_SUPPORTED:不管方法A有没有事务，方法B都不会有事务
5.PROPAGATION_MANDATORY:如果方法A有事务，方法B加入该事务，如果方法A无事务，则直接报错
6.PROPAGATION_NEVER:如果方法A无事务，方法B也无事务，如果方法A有事务，则直接报错